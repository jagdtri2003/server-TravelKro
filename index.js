const express = require('express');
const app = express();
const port = process.env.PORT || 4000; // Set your desired port number
const cors=require('cors');

const nodemailer = require('nodemailer');

// Create a transporter object using the default SMTP transport
const transporter = nodemailer.createTransport({
  host:'smtp-relay.brevo.com',
  port:587,
  auth: {
    user: 'heruko.pythonanywhere@gmail.com',  // Your Gmail email address
    pass:process.env.REACT_APP_PASS     // Your Gmail password or app password
  }
});

// Define your routes and middleware here

app.use(express.json());
app.use(cors());
app.use('/flight',require('./routes/flight'));
app.use('/hotel',require('./routes/hotel'));


app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

app.get('/',(req,res)=>{
    res.send("Working!!");
})

app.get('/location',(req,res)=>{
const location = [
  [81.78049, 25.46007, '2024-10-01T08:00:00Z'],
  [81.78056, 25.4602, '2024-10-01T08:01:00Z'],
  [81.78093, 25.46006, '2024-10-01T08:02:00Z'],
  [81.7811, 25.45999, '2024-10-01T08:03:00Z'],
  [81.78154, 25.45983, '2024-10-01T08:04:00Z'],
  [81.7818, 25.45974, '2024-10-01T08:05:00Z'],
  [81.78191, 25.45969, '2024-10-01T08:06:00Z'],
  [81.78188, 25.4596, '2024-10-01T08:07:00Z'],
  [81.78189, 25.45959, '2024-10-01T08:08:00Z'],
  [81.78191, 25.45958, '2024-10-01T08:09:00Z'],
  [81.78193, 25.45957, '2024-10-01T08:10:00Z'],
  [81.78195, 25.45956, '2024-10-01T08:11:00Z'],
  [81.78183, 25.45929, '2024-10-01T08:12:00Z'],
  [81.78176, 25.4591, '2024-10-01T08:13:00Z'],
  [81.78163, 25.45868, '2024-10-01T08:14:00Z'],
  [81.78165, 25.45867, '2024-10-01T08:15:00Z'],
  [81.78169, 25.45865, '2024-10-01T08:16:00Z'],
  [81.78172, 25.45863, '2024-10-01T08:17:00Z'],
  [81.78175, 25.45861, '2024-10-01T08:18:00Z'],
  [81.78181, 25.45856, '2024-10-01T08:19:00Z'],
  [81.78185, 25.45852, '2024-10-01T08:20:00Z'],
  [81.78189, 25.45849, '2024-10-01T08:21:00Z'],
  [81.78192, 25.45847, '2024-10-01T08:22:00Z'],
  [81.78197, 25.45845, '2024-10-01T08:23:00Z'],
  [81.78202, 25.45843, '2024-10-01T08:24:00Z'],
  [81.78235, 25.45831, '2024-10-01T08:25:00Z'],
  [81.78233, 25.45825, '2024-10-01T08:26:00Z'],
  [81.7823, 25.45813, '2024-10-01T08:27:00Z'],
  [81.78227, 25.458, '2024-10-01T08:28:00Z'],
  [81.78225, 25.45791, '2024-10-01T08:29:00Z'],
  [81.78223, 25.45783, '2024-10-01T08:30:00Z'],
  [81.78222, 25.4578, '2024-10-01T08:31:00Z'],
  [81.78238, 25.45779, '2024-10-01T08:32:00Z'],
  [81.78245, 25.45778, '2024-10-01T08:33:00Z'],
  [81.78254, 25.45777, '2024-10-01T08:34:00Z'],
  [81.78262, 25.45775, '2024-10-01T08:35:00Z'],
  [81.78268, 25.45773, '2024-10-01T08:36:00Z'],
  [81.78274, 25.45771, '2024-10-01T08:37:00Z'],
  [81.78276, 25.4577, '2024-10-01T08:38:00Z'],
  [81.78277, 25.45769, '2024-10-01T08:39:00Z'],
  [81.78277, 25.45767, '2024-10-01T08:40:00Z'],
  [81.78277, 25.45766, '2024-10-01T08:41:00Z'],
  [81.78277, 25.45763, '2024-10-01T08:42:00Z'],
  [81.78274, 25.4574, '2024-10-01T08:43:00Z'],
  [81.78259, 25.45682, '2024-10-01T08:44:00Z'],
  [81.78258, 25.45673, '2024-10-01T08:45:00Z'],
  [81.78257, 25.45667, '2024-10-01T08:46:00Z'],
  [81.78256, 25.45663, '2024-10-01T08:47:00Z'],
  [81.78255, 25.45655, '2024-10-01T08:48:00Z'],
  [81.78252, 25.45645, '2024-10-01T08:49:00Z'],
  [81.7825, 25.45633, '2024-10-01T08:50:00Z'],
  [81.78248, 25.4562, '2024-10-01T08:51:00Z'],
  [81.78247, 25.45607, '2024-10-01T08:52:00Z'],
  [81.78255, 25.45603, '2024-10-01T08:53:00Z'],
  [81.78265, 25.45598, '2024-10-01T08:54:00Z'],
  [81.78272, 25.45594, '2024-10-01T08:55:00Z'],
  [81.78278, 25.45592, '2024-10-01T08:56:00Z'],
  [81.78283, 25.4559, '2024-10-01T08:57:00Z'],
  [81.78288, 25.45589, '2024-10-01T08:58:00Z'],
  [81.78292, 25.45588, '2024-10-01T08:59:00Z'],
  [81.78298, 25.45587, '2024-10-01T09:00:00Z'],
  [81.78305, 25.45583, '2024-10-01T09:01:00Z'],
  [81.783, 25.45567, '2024-10-01T09:02:00Z'],
  [81.78328, 25.45557, '2024-10-01T09:03:00Z'],
  [81.78439, 25.4552, '2024-10-01T09:04:00Z'],
  [81.78468, 25.4551, '2024-10-01T09:05:00Z'],
  [81.78497, 25.455, '2024-10-01T09:06:00Z'],
  [81.78503, 25.45498, '2024-10-01T09:07:00Z'],
  [81.78507, 25.45497, '2024-10-01T09:08:00Z'],
  [81.7851, 25.45496, '2024-10-01T09:09:00Z'],
  [81.78554, 25.45475, '2024-10-01T09:10:00Z'],
  [81.78542, 25.45456, '2024-10-01T09:11:00Z'],
  [81.7853, 25.45437, '2024-10-01T09:12:00Z'],
  [81.7851, 25.45421, '2024-10-01T09:13:00Z'],
  [81.7849, 25.45402, '2024-10-01T09:14:00Z'],
  [81.7848, 25.4539, '2024-10-01T09:15:00Z'],
  [81.7847, 25.4537, '2024-10-01T09:16:00Z'],
  [81.78468, 25.45354, '2024-10-01T09:17:00Z'],
  [81.78465, 25.4534, '2024-10-01T09:18:00Z'],
  [81.78463, 25.45326, '2024-10-01T09:19:00Z'],
  [81.7846, 25.45313, '2024-10-01T09:20:00Z'],
  [81.78457, 25.453, '2024-10-01T09:21:00Z'],
  [81.78455, 25.45287, '2024-10-01T09:22:00Z'],
  [81.78452, 25.45273, '2024-10-01T09:23:00Z'],
  [81.78448, 25.4526, '2024-10-01T09:24:00Z'],
  [81.78443, 25.45245, '2024-10-01T09:25:00Z'],
  [81.7844, 25.45232, '2024-10-01T09:26:00Z'],
  [81.7844, 25.45222, '2024-10-01T09:27:00Z'],
  [81.7844, 25.45212, '2024-10-01T09:28:00Z'],
  [81.7844, 25.45201, '2024-10-01T09:29:00Z'],
  [81.7844, 25.45191, '2024-10-01T09:30:00Z'],
  [81.7844, 25.4518, '2024-10-01T09:31:00Z'],
  [81.7844, 25.4517, '2024-10-01T09:32:00Z'],
  [81.7844, 25.4515, '2024-10-01T09:33:00Z'],
  [81.7844, 25.4514, '2024-10-01T09:34:00Z'],
  [81.7844, 25.4513, '2024-10-01T09:35:00Z'],
  [81.7844, 25.4512, '2024-10-01T09:36:00Z'],
  [81.7844, 25.4511, '2024-10-01T09:37:00Z'],
  [81.7844, 25.451, '2024-10-01T09:38:00Z'],
  [81.7844, 25.4509, '2024-10-01T09:39:00Z'],
  [81.7844, 25.4508, '2024-10-01T09:40:00Z'],
  [81.7844, 25.4507, '2024-10-01T09:41:00Z'],
  [81.7844, 25.4506, '2024-10-01T09:42:00Z'],
  [81.7844, 25.4505, '2024-10-01T09:43:00Z'],
  [81.7844, 25.4504, '2024-10-01T09:44:00Z'],
  [81.7844, 25.4503, '2024-10-01T09:45:00Z'],
  [81.7844, 25.4502, '2024-10-01T09:46:00Z'],
  [81.7844, 25.4501, '2024-10-01T09:47:00Z'],
  [81.7844, 25.45001, '2024-10-01T09:48:00Z'],
  [81.7844, 25.45003, '2024-10-01T09:49:00Z'],
  [81.7844, 25.45005, '2024-10-01T09:50:00Z'],
  [81.7844, 25.45006, '2024-10-01T09:51:00Z'],
  [81.7844, 25.45007, '2024-10-01T09:52:00Z'],
];
  res.json(location);
})

app.post('/sendmail', (req, res) => {

    // Email data
    const mailOptions = {
        from: 'noreply@travelkro.in',
        to: req.body.userEmail,
        subject: 'Hello from Nodemailer',
        text: 'Hello, this is a test email sent with Nodemailer!'
    };

    // Send email
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            res.send(error);
        } else {
            res.send("Email Send!!");
        }
    });
});

